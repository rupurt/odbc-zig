const std = @import("std");

pub const c = @cImport({
    @cInclude("sql.h");
    @cInclude("sqltypes.h");
    @cInclude("sqlext.h");
});

pub const InfoType = enum(c_int) {
    // ODBC spec
    AccessibleProcedures = c.SQL_ACCESSIBLE_PROCEDURES,
    AccessibleTables = c.SQL_ACCESSIBLE_TABLES,
    ActiveEnvironments = c.SQL_ACTIVE_ENVIRONMENTS,
    AggregateFunctions = c.SQL_AGGREGATE_FUNCTIONS,
    AlterDomain = c.SQL_ALTER_DOMAIN,
    AlterTable = c.SQL_ALTER_TABLE,
    BatchRowCount = c.SQL_BATCH_ROW_COUNT,
    BatchSupport = c.SQL_BATCH_SUPPORT,
    BookmarkPersistence = c.SQL_BOOKMARK_PERSISTENCE,
    CatalogLocation = c.SQL_CATALOG_LOCATION,
    CatalogName = c.SQL_CATALOG_NAME,
    CatalogNameSeparator = c.SQL_CATALOG_NAME_SEPARATOR,
    CatalogTerm = c.SQL_CATALOG_TERM,
    CatalogUsage = c.SQL_CATALOG_USAGE,
    CollationSeq = c.SQL_COLLATION_SEQ,
    ColumnAlias = c.SQL_COLUMN_ALIAS,
    // ConcatNullBehavior = c.SQL_CONCAT_NULL_BEHAVIOR,
    ConvertBigint = c.SQL_CONVERT_BIGINT,
    ConvertBinary = c.SQL_CONVERT_BINARY,
    ConvertBit = c.SQL_CONVERT_BIT,
    ConvertChar = c.SQL_CONVERT_CHAR,
    ConvertDate = c.SQL_CONVERT_DATE,
    ConvertDecimal = c.SQL_CONVERT_DECIMAL,
    ConvertDouble = c.SQL_CONVERT_DOUBLE,
    ConvertFloat = c.SQL_CONVERT_FLOAT,
    ConvertInteger = c.SQL_CONVERT_INTEGER,
    ConvertIntervalDayTime = c.SQL_CONVERT_INTERVAL_DAY_TIME,
    ConvertIntervalYearMonth = c.SQL_CONVERT_INTERVAL_YEAR_MONTH,
    ConvertLongvarbinary = c.SQL_CONVERT_LONGVARBINARY,
    ConvertLongvarchar = c.SQL_CONVERT_LONGVARCHAR,
    ConvertNumeric = c.SQL_CONVERT_NUMERIC,
    ConvertReal = c.SQL_CONVERT_REAL,
    ConvertSmallint = c.SQL_CONVERT_SMALLINT,
    ConvertTime = c.SQL_CONVERT_TIME,
    ConvertTimestamp = c.SQL_CONVERT_TIMESTAMP,
    ConvertTinyint = c.SQL_CONVERT_TINYINT,
    ConvertVarbinary = c.SQL_CONVERT_VARBINARY,
    ConvertVarchar = c.SQL_CONVERT_VARCHAR,
    ConvertFunctions = c.SQL_CONVERT_FUNCTIONS,
    // CorrelationName = c.SQL_CORRELATION_NAME,
    // CreateAssertion = c.SQL_CREATE_ASSERTION,
    // CreateCharacterSet = c.SQL_CREATE_CHARACTER_SET,
    // CreateCollation = c.SQL_CREATE_COLLATION,
    // CreateDomain = c.SQL_CREATE_DOMAIN,
    // CreateSchema = c.SQL_CREATE_SCHEMA,
    // CreateTable = c.SQL_CREATE_TABLE,
    // CreateTranslation = c.SQL_CREATE_TRANSLATION,
    // CursorCommitBehavior = c.SQL_CURSOR_COMMIT_BEHAVIOR,
    // CursorRollbackBehavior = c.SQL_CURSOR_ROLLBACK_BEHAVIOR,
    // CursorSensitivity = c.SQL_CURSOR_SENSITIVITY,
    // DataSourceName = c.SQL_DATA_SOURCE_NAME,
    // DataSourceReadOnly = c.SQL_DATA_SOURCE_READ_ONLY,
    // DatabaseName = c.SQL_DATABASE_NAME,
    // DbmsName = c.SQL_DBMS_NAME,
    // DbmsVer = c.SQL_DBMS_VER,
    // DdlIndex = c.SQL_DDL_INDEX,
    // DefaultTxnIsolation = c.SQL_DEFAULT_TXN_ISOLATION,
    // DescribeParameter = c.SQL_DESCRIBE_PARAMETER,
    // DriverHdbc = c.SQL_DRIVER_HDBC,
    // DriverHenv = c.SQL_DRIVER_HENV,
    // DriverHlib = c.SQL_DRIVER_HLIB,
    // DriverHstmt = c.SQL_DRIVER_HSTMT,
    // DriverName = c.SQL_DRIVER_NAME,
    // DriverOdbcVer = c.SQL_DRIVER_ODBC_VER,
    // DriverVer = c.SQL_DRIVER_VER,
    // DropAssertion = c.SQL_DROP_ASSERTION,
    // DropCharacterSet = c.SQL_DROP_CHARACTER_SET,
    // DropCollation = c.SQL_DROP_COLLATION,
    // DropDomain = c.SQL_DROP_DOMAIN,
    // DropSchema = c.SQL_DROP_SCHEMA,
    // DropTable = c.SQL_DROP_TABLE,
    // DropTranslation = c.SQL_DROP_TRANSLATION,
    // DropView = c.SQL_DROP_VIEW,
    // DynamicCursorAttributes1 = c.SQL_DYNAMIC_CURSOR_ATTRIBUTES1,
    // DynamicCursorAttributes2 = c.SQL_DYNAMIC_CURSOR_ATTRIBUTES2,
    // ExpressionsInOrderby = c.SQL_EXPRESSIONS_IN_ORDERBY,
    // FetchDirection = c.SQL_FETCH_DIRECTION,
    // FileUsage = c.SQL_FILE_USAGE,
    // ForwardOnlyCursorAttributes1 = c.SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1,
    // ForwardOnlyCursorAttributes2 = c.SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2,
    // GetdataExtensions = c.SQL_GETDATA_EXTENSIONS,
    // GroupBy = c.SQL_GROUP_BY,
    // IdentifierCase = c.SQL_IDENTIFIER_CASE,
    // IdentifierQuoteChar = c.SQL_IDENTIFIER_QUOTE_CHAR,
    // InfoSchemaViews = c.SQL_INFO_SCHEMA_VIEWS,
    // InsertStatement = c.SQL_INSERT_STATEMENT,
    // Integrity = c.SQL_INTEGRITY,
    // KeysetCursorAttributes1 = c.SQL_KEYSET_CURSOR_ATTRIBUTES1,
    // KeysetCursorAttributes2 = c.SQL_KEYSET_CURSOR_ATTRIBUTES2,
    // Keywords = c.SQL_KEYWORDS,
    // LikeEscapeClause = c.SQL_LIKE_ESCAPE_CLAUSE,
    // LockTypes = c.SQL_LOCK_TYPES,
    // MaxAsyncConcurrentStatements = c.SQL_MAX_ASYNC_CONCURRENT_STATEMENTS,
    // MaxBinaryLiteralLen = c.SQL_MAX_BINARY_LITERAL_LEN,
    // MaxCatalogNameLen = c.SQL_MAX_CATALOG_NAME_LEN,
    // MaxCharLiteralLen = c.SQL_MAX_CHAR_LITERAL_LEN,
    // MaxColumnNameLen = c.SQL_MAX_COLUMN_NAME_LEN,
    // MaxColumnsInGroupBy = c.SQL_MAX_COLUMNS_IN_GROUP_BY,
    // MaxColumnsInIndex = c.SQL_MAX_COLUMNS_IN_INDEX,
    // MaxColumnsInOrderBy = c.SQL_MAX_COLUMNS_IN_ORDER_BY,
    // MaxColumnsInSelect = c.SQL_MAX_COLUMNS_IN_SELECT,
    // MaxColumnsInTable = c.SQL_MAX_COLUMNS_IN_TABLE,
    // MaxConcurrentActivities = c.SQL_MAX_CONCURRENT_ACTIVITIES,
    // MaxCursorNameLen = c.SQL_MAX_CURSOR_NAME_LEN,
    // MaxDriverConnections = c.SQL_MAX_DRIVER_CONNECTIONS,
    // MaxIdentifierLen = c.SQL_MAX_IDENTIFIER_LEN,
    // MaxIndexSize = c.SQL_MAX_INDEX_SIZE,
    // MaxProcedureNameLen = c.SQL_MAX_PROCEDURE_NAME_LEN,
    // MaxRowSize = c.SQL_MAX_ROW_SIZE,
    // MaxRowSizeIncludesLong = c.SQL_MAX_ROW_SIZE_INCLUDES_LONG,
    // MaxSchemaNameLen = c.SQL_MAX_SCHEMA_NAME_LEN,
    // MaxStatementLen = c.SQL_MAX_STATEMENT_LEN,
    // MaxTableNameLen = c.SQL_MAX_TABLE_NAME_LEN,
    // MaxTablesInSelect = c.SQL_MAX_TABLES_IN_SELECT,
    // MaxUserNameLen = c.SQL_MAX_USER_NAME_LEN,
    // MultResultSets = c.SQL_MULT_RESULT_SETS,
    // MultipleActiveTxn = c.SQL_MULTIPLE_ACTIVE_TXN,
    // NeedLongDataLen = c.SQL_NEED_LONG_DATA_LEN,
    // NonNullableColumns = c.SQL_NON_NULLABLE_COLUMNS,
    // NullCollation = c.SQL_NULL_COLLATION,
    // NumericFunctions = c.SQL_NUMERIC_FUNCTIONS,
    // OdbcApiConformance = c.SQL_ODBC_API_CONFORMANCE,
    // OdbcSagCliConformance = c.SQL_ODBC_SAG_CLI_CONFORMANCE,
    // OdbcSqlConformance = c.SQL_ODBC_SQL_CONFORMANCE,
    // OdbcVer = c.SQL_ODBC_VER,
    // OjCapabilities = c.SQL_OJ_CAPABILITIES,
    // OrderByColumnsInSelect = c.SQL_ORDER_BY_COLUMNS_IN_SELECT,
    // OuterJoins = c.SQL_OUTER_JOINS,
    // OwnerTerm = c.SQL_OWNER_TERM,
    // ParamArrayRowCounts = c.SQL_PARAM_ARRAY_ROW_COUNTS,
    // ParamArraySelects = c.SQL_PARAM_ARRAY_SELECTS,
    // PosOperations = c.SQL_POS_OPERATIONS,
    // PositionedStatements = c.SQL_POSITIONED_STATEMENTS,
    // ProcedureTerm = c.SQL_PROCEDURE_TERM,
    // Procedures = c.SQL_PROCEDURES,
    // QuotedIdentifierCase = c.SQL_QUOTED_IDENTIFIER_CASE,
    // RowUpdates = c.SQL_ROW_UPDATES,
    // SchemaUsage = c.SQL_SCHEMA_USAGE,
    // ScrollConcurrency = c.SQL_SCROLL_CONCURRENCY,
    // ScrollOptions = c.SQL_SCROLL_OPTIONS,
    // SearchPatternEscape = c.SQL_SEARCH_PATTERN_ESCAPE,
    // ServerName = c.SQL_SERVER_NAME,
    // SpecialCharacters = c.SQL_SPECIAL_CHARACTERS,
    // Sql92Predicates = c.SQL_SQL92_PREDICATES,
    // Sql92ValueExpressions = c.SQL_SQL92_VALUE_EXPRESSIONS,
    // StaticCursorAttributes1 = c.SQL_STATIC_CURSOR_ATTRIBUTES1,
    // StaticCursorAttributes2 = c.SQL_STATIC_CURSOR_ATTRIBUTES2,
    // StaticSensitivity = c.SQL_STATIC_SENSITIVITY,
    // StringFunctions = c.SQL_STRING_FUNCTIONS,
    // Subqueries = c.SQL_SUBQUERIES,
    // SystemFunctions = c.SQL_SYSTEM_FUNCTIONS,
    // TableTerm = c.SQL_TABLE_TERM,
    // TimedateAddIntervals = c.SQL_TIMEDATE_ADD_INTERVALS,
    // TimedateDiffIntervals = c.SQL_TIMEDATE_DIFF_INTERVALS,
    // TimedateFunctions = c.SQL_TIMEDATE_FUNCTIONS,
    // TxnCapable = c.SQL_TXN_CAPABLE,
    // TxnIsolationOption = c.SQL_TXN_ISOLATION_OPTION,
    // Union = c.SQL_UNION,
    // UserName = c.SQL_USER_NAME,
    // XopenCliYear = c.SQL_XOPEN_CLI_YEAR,
    // // IBM Db2 specific info types
    // // AsciiGccsid = c.SQL_ASCII_GCCSID,
    // // AsciiMccsid = c.SQL_ASCII_MCCSID,
    // // AsciiSccsid = c.SQL_ASCII_SCCSID,
    // // ConvertRowid = c.SQL_CONVERT_ROWID,
    // // CloseBehavior = c.SQL_CLOSE_BEHAVIOR,
    // // EbcdicGccsid = c.SQL_EBCDIC_GCCSID,
    // // EbcdicMccsid = c.SQL_EBCDIC_MCCSID,
    // // EbcdicSccsid = c.SQL_EBCDIC_SCCSID,
    // // UnicodeGccsid = c.SQL_UNICODE_GCCSID,
    // // UnicodeMccsid = c.SQL_UNICODE_MCCSID,
    // // UnicodeSccsid = c.SQL_UNICODE_SCCSID,
};

const buf_len = 32;

pub const InfoTypeValue = struct {
    info_type: InfoType,
    buf: [buf_len]u8 = undefined,
    str_len: i16 = undefined,

    pub fn tag(self: InfoTypeValue) Tag {
        return switch (self.info_type) {
            .AccessibleProcedures => .{ .AccessibleProcedures = strToBool(self.buf, self.str_len, "Y") },
            .AccessibleTables => .{ .AccessibleTables = strToBool(self.buf, self.str_len, "Y") },
            .ActiveEnvironments => .{ .ActiveEnvironments = readInt(u16, self.buf, 2) },
            .AggregateFunctions => .{ .AggregateFunctions = .{ .data = readInt(u32, self.buf, 4) } },
            .AlterDomain => .{ .AlterDomain = .{ .data = readInt(u32, self.buf, 4) } },
            .AlterTable => .{ .AlterTable = .{ .data = readInt(u32, self.buf, 4) } },
            .BatchRowCount => .{ .BatchRowCount = .{ .data = readInt(u32, self.buf, 4) } },
            .BatchSupport => .{ .BatchSupport = .{ .data = readInt(u32, self.buf, 4) } },
            .BookmarkPersistence => .{ .BookmarkPersistence = .{ .data = readInt(u32, self.buf, 4) } },
            .CatalogLocation => .{ .CatalogLocation = readInt(u16, self.buf, 2) },
            .CatalogName => .{ .CatalogName = strToBool(self.buf, self.str_len, "Y") },
            .CatalogNameSeparator => .{ .CatalogNameSeparator = self.buf[0..@intCast(self.str_len)] },
            .CatalogTerm => .{ .CatalogTerm = self.buf[0..@intCast(self.str_len)] },
            .CatalogUsage => .{ .CatalogUsage = .{ .data = readInt(u32, self.buf, 4) } },
            .CollationSeq => .{ .CollationSeq = self.buf[0..@intCast(self.str_len)] },
            .ColumnAlias => .{ .ColumnAlias = strToBool(self.buf, self.str_len, "Y") },
            // .ConcatNullBehavior => .{ .ConcatNullBehavior = value },
            .ConvertBigint => .{ .ConvertBigint = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertBinary => .{ .ConvertBinary = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertBit => .{ .ConvertBit = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertChar => .{ .ConvertChar = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertDate => .{ .ConvertDate = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertDecimal => .{ .ConvertDecimal = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertDouble => .{ .ConvertDouble = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertFloat => .{ .ConvertFloat = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertInteger => .{ .ConvertInteger = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertIntervalDayTime => .{ .ConvertIntervalDayTime = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertIntervalYearMonth => .{ .ConvertIntervalYearMonth = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertLongvarbinary => .{ .ConvertLongvarbinary = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertLongvarchar => .{ .ConvertLongvarchar = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertNumeric => .{ .ConvertNumeric = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertReal => .{ .ConvertReal = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertSmallint => .{ .ConvertSmallint = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertTime => .{ .ConvertTime = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertTimestamp => .{ .ConvertTimestamp = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertTinyint => .{ .ConvertTinyint = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertVarbinary => .{ .ConvertVarbinary = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertVarchar => .{ .ConvertVarchar = .{ .data = readInt(u32, self.buf, 4) } },
            .ConvertFunctions => .{ .ConvertFunctions = .{ .data = readInt(u32, self.buf, 4) } },
            // .CorrelationName => .{ .CorrelationName = value },
            // .CreateAssertion => .{ .CreateAssertion = value },
            // .CreateCharacterSet => .{ .CreateCharacterSet = value },
            // .CreateCollation => .{ .CreateCollation = value },
            // .CreateDomain => .{ .CreateDomain = value },
            // .CreateSchema => .{ .CreateSchema = value },
            // .CreateTable => .{ .CreateTable = value },
            // .CreateTranslation => .{ .CreateTranslation = value },
            // .CursorCommitBehavior => .{ .CursorCommitBehavior = value },
            // .CursorRollbackBehavior => .{ .CursorRollbackBehavior = value },
            // .CursorSensitivity => .{ .CursorSensitivity = value },
            // .DataSourceName => .{ .DataSourceName = value },
            // .DataSourceReadOnly => .{ .DataSourceReadOnly = value },
            // .DatabaseName => .{ .DatabaseName = value },
            // .DbmsName => .{ .DbmsName = value },
            // .DbmsVer => .{ .DbmsVer = value },
            // .DdlIndex => .{ .DdlIndex = value },
            // .DefaultTxnIsolation => .{ .DefaultTxnIsolation = value },
            // .DescribeParameter => .{ .DescribeParameter = value },
            // .DriverHdbc => .{ .DriverHdbc = value },
            // .DriverHenv => .{ .DriverHenv = value },
            // .DriverHlib => .{ .DriverHlib = value },
            // .DriverHstmt => .{ .DriverHstmt = value },
            // .DriverName => .{ .DriverName = value },
            // .DriverOdbcVer => .{ .DriverOdbcVer = value },
            // .DriverVer => .{ .DriverVer = value },
            // .DropAssertion => .{ .DropAssertion = value },
            // .DropCharacterSet => .{ .DropCharacterSet = value },
            // .DropCollation => .{ .DropCollation = value },
            // .DropDomain => .{ .DropDomain = value },
            // .DropSchema => .{ .DropSchema = value },
            // .DropTable => .{ .DropTable = value },
            // .DropTranslation => .{ .DropTranslation = value },
            // .DropView => .{ .DropView = value },
            // .DynamicCursorAttributes1 => .{ .DynamicCursorAttributes1 = value },
            // .DynamicCursorAttributes2 => .{ .DynamicCursorAttributes2 = value },
            // .ExpressionsInOrderby => .{ .ExpressionsInOrderby = value },
            // .FetchDirection => .{ .FetchDirection = value },
            // .FileUsage => .{ .FileUsage = value },
            // .ForwardOnlyCursorAttributes1 => .{ .ForwardOnlyCursorAttributes1 = value },
            // .ForwardOnlyCursorAttributes2 => .{ .ForwardOnlyCursorAttributes2 = value },
            // .GetdataExtensions => .{ .GetdataExtensions = value },
            // .GroupBy => .{ .GroupBy = value },
            // .IdentifierCase => .{ .IdentifierCase = value },
            // .IdentifierQuoteChar => .{ .IdentifierQuoteChar = value },
            // .InfoSchemaViews => .{ .InfoSchemaViews = value },
            // .InsertStatement => .{ .InsertStatement = value },
            // .Integrity => .{ .Integrity = value },
            // .KeysetCursorAttributes1 => .{ .KeysetCursorAttributes1 = value },
            // .KeysetCursorAttributes2 => .{ .KeysetCursorAttributes2 = value },
            // .Keywords => .{ .Keywords = value },
            // .LikeEscapeClause => .{ .LikeEscapeClause = value },
            // .LockTypes => .{ .LockTypes = value },
            // .MaxAsyncConcurrentStatements => .{ .MaxAsyncConcurrentStatements = value },
            // .MaxBinaryLiteralLen => .{ .MaxBinaryLiteralLen = value },
            // .MaxCatalogNameLen => .{ .MaxCatalogNameLen = value },
            // .MaxCharLiteralLen => .{ .MaxCharLiteralLen = value },
            // .MaxColumnNameLen => .{ .MaxColumnNameLen = value },
            // .MaxColumnsInGroupBy => .{ .MaxColumnsInGroupBy = value },
            // .MaxColumnsInIndex => .{ .MaxColumnsInIndex = value },
            // .MaxColumnsInOrderBy => .{ .MaxColumnsInOrderBy = value },
            // .MaxColumnsInSelect => .{ .MaxColumnsInSelect = value },
            // .MaxColumnsInTable => .{ .MaxColumnsInTable = value },
            // .MaxConcurrentActivities => .{ .MaxConcurrentActivities = value },
            // .MaxCursorNameLen => .{ .MaxCursorNameLen = value },
            // .MaxDriverConnections => .{ .MaxDriverConnections = value },
            // .MaxIdentifierLen => .{ .MaxIdentifierLen = value },
            // .MaxIndexSize => .{ .MaxIndexSize = value },
            // .MaxProcedureNameLen => .{ .MaxProcedureNameLen = value },
            // .MaxRowSize => .{ .MaxRowSize = value },
            // .MaxRowSizeIncludesLong => .{ .MaxRowSizeIncludesLong = value },
            // .MaxSchemaNameLen => .{ .MaxSchemaNameLen = value },
            // .MaxStatementLen => .{ .MaxStatementLen = value },
            // .MaxTableNameLen => .{ .MaxTableNameLen = value },
            // .MaxTablesInSelect => .{ .MaxTablesInSelect = value },
            // .MaxUserNameLen => .{ .MaxUserNameLen = value },
            // .MultResultSets => .{ .MultResultSets = value },
            // .MultipleActiveTxn => .{ .MultipleActiveTxn = value },
            // .NeedLongDataLen => .{ .NeedLongDataLen = value },
            // .NonNullableColumns => .{ .NonNullableColumns = value },
            // .NullCollation => .{ .NullCollation = value },
            // .NumericFunctions => .{ .NumericFunctions = value },
            // .OdbcApiConformance => .{ .OdbcApiConformance = value },
            // .OdbcSagCliConformance => .{ .OdbcSagCliConformance = value },
            // .OdbcSqlConformance => .{ .OdbcSqlConformance = value },
            // .OdbcVer => .{ .OdbcVer = value },
            // .OjCapabilities => .{ .OjCapabilities = value },
            // .OrderByColumnsInSelect => .{ .OrderByColumnsInSelect = value },
            // .OuterJoins => .{ .OuterJoins = value },
            // .OwnerTerm => .{ .OwnerTerm = value },
            // .ParamArrayRowCounts => .{ .ParamArrayRowCounts = value },
            // .ParamArraySelects => .{ .ParamArraySelects = value },
            // .PosOperations => .{ .PosOperations = value },
            // .PositionedStatements => .{ .PositionedStatements = value },
            // .ProcedureTerm => .{ .ProcedureTerm = value },
            // .Procedures => .{ .Procedures = value },
            // .QuotedIdentifierCase => .{ .QuotedIdentifierCase = value },
            // .RowUpdates => .{ .RowUpdates = value },
            // .SchemaUsage => .{ .SchemaUsage = value },
            // .ScrollConcurrency => .{ .ScrollConcurrency = value },
            // .ScrollOptions => .{ .ScrollOptions = value },
            // .SearchPatternEscape => .{ .SearchPatternEscape = value },
            // .ServerName => .{ .ServerName = value },
            // .SpecialCharacters => .{ .SpecialCharacters = value },
            // .Sql92Predicates => .{ .Sql92Predicates = value },
            // .Sql92ValueExpressions => .{ .Sql92ValueExpressions = value },
            // .StaticCursorAttributes1 => .{ .StaticCursorAttributes1 = value },
            // .StaticCursorAttributes2 => .{ .StaticCursorAttributes2 = value },
            // .StaticSensitivity => .{ .StaticSensitivity = value },
            // .StringFunctions => .{ .StringFunctions = value },
            // .Subqueries => .{ .Subqueries = value },
            // .SystemFunctions => .{ .SystemFunctions = value },
            // .TableTerm => .{ .TableTerm = value },
            // .TimedateAddIntervals => .{ .TimedateAddIntervals = value },
            // .TimedateDiffIntervals => .{ .TimedateDiffIntervals = value },
            // .TimedateFunctions => .{ .TimedateFunctions = value },
            // .TxnCapable => .{ .TxnCapable = value },
            // .TxnIsolationOption => .{ .TxnIsolationOption = value },
            // .Union => .{ .Union = value },
            // .UserName => .{ .UserName = value },
            // .XopenCliYear => .{ .XopenCliYear = value },
            // IBM Db2 specific info types
            // .AsciiGccsid => .{ .AsciiGccsid = value },
            // .AsciiMccsid => .{ .AsciiMccsid = value },
            // .AsciiSccsid => .{ .AsciiSccsid = value },
            // .ConvertRowid => .{ .ConvertRowid = value },
            // .CloseBehavior => .{ .CloseBehavior = value },
            // .EbcdicGccsid => .{ .EbcdicGccsid = value },
            // .EbcdicMccsid => .{ .EbcdicMccsid = value },
            // .EbcdicSccsid => .{ .EbcdicSccsid = value },
            // .UnicodeGccsid => .{ .UnicodeGccsid = value },
            // .UnicodeMccsid => .{ .UnicodeMccsid = value },
            // .UnicodeSccsid => .{ .UnicodeSccsid = value },
        };
    }

    pub const Tag = union(InfoType) {
        AccessibleProcedures: bool,
        AccessibleTables: bool,
        ActiveEnvironments: u16,
        AggregateFunctions: AggregateFunctionsMask,
        AlterDomain: AlterDomainMask,
        AlterTable: AlterTableMask,
        BatchRowCount: BatchRowCountMask,
        BatchSupport: BatchSupportMask,
        BookmarkPersistence: BookmarkPersistenceMask,
        CatalogLocation: u16,
        CatalogName: bool,
        CatalogNameSeparator: []const u8,
        CatalogTerm: []const u8,
        CatalogUsage: CatalogUsageMask,
        CollationSeq: []const u8,
        ColumnAlias: bool,
        // ConcatNullBehavior: [buf_len]u8,
        ConvertBigint: ConvertBigintMask,
        ConvertBinary: ConvertBinaryMask,
        ConvertBit: ConvertBitMask,
        ConvertChar: ConvertCharMask,
        ConvertDate: ConvertDateMask,
        ConvertDecimal: ConvertDecimalMask,
        ConvertDouble: ConvertDoubleMask,
        ConvertFloat: ConvertFloatMask,
        ConvertInteger: ConvertIntegerMask,
        ConvertIntervalDayTime: ConvertIntervalDayTimeMask,
        ConvertIntervalYearMonth: ConvertIntervalYearMonthMask,
        ConvertLongvarbinary: ConvertLongvarbinaryMask,
        ConvertLongvarchar: ConvertLongvarcharMask,
        ConvertNumeric: ConvertNumericMask,
        ConvertReal: ConvertRealMask,
        ConvertSmallint: ConvertSmallintMask,
        ConvertTime: ConvertTimeMask,
        ConvertTimestamp: ConvertTimestampMask,
        ConvertTinyint: ConvertTinyintMask,
        ConvertVarbinary: ConvertVarbinaryMask,
        ConvertVarchar: ConvertVarcharMask,
        ConvertFunctions: ConvertFunctionsMask,
        // CorrelationName: [buf_len]u8,
        // CreateAssertion: [buf_len]u8,
        // CreateCharacterSet: [buf_len]u8,
        // CreateCollation: [buf_len]u8,
        // CreateDomain: [buf_len]u8,
        // CreateSchema: [buf_len]u8,
        // CreateTable: [buf_len]u8,
        // CreateTranslation: [buf_len]u8,
        // CursorCommitBehavior: [buf_len]u8,
        // CursorRollbackBehavior: [buf_len]u8,
        // CursorSensitivity: [buf_len]u8,
        // DataSourceName: [buf_len]u8,
        // DataSourceReadOnly: [buf_len]u8,
        // DatabaseName: [buf_len]u8,
        // DbmsName: [buf_len]u8,
        // DbmsVer: [buf_len]u8,
        // DdlIndex: [buf_len]u8,
        // DefaultTxnIsolation: [buf_len]u8,
        // DescribeParameter: [buf_len]u8,
        // DriverHdbc: [buf_len]u8,
        // DriverHenv: [buf_len]u8,
        // DriverHlib: [buf_len]u8,
        // DriverHstmt: [buf_len]u8,
        // DriverName: [buf_len]u8,
        // DriverOdbcVer: [buf_len]u8,
        // DriverVer: [buf_len]u8,
        // DropAssertion: [buf_len]u8,
        // DropCharacterSet: [buf_len]u8,
        // DropCollation: [buf_len]u8,
        // DropDomain: [buf_len]u8,
        // DropSchema: [buf_len]u8,
        // DropTable: [buf_len]u8,
        // DropTranslation: [buf_len]u8,
        // DropView: [buf_len]u8,
        // DynamicCursorAttributes1: [buf_len]u8,
        // DynamicCursorAttributes2: [buf_len]u8,
        // ExpressionsInOrderby: [buf_len]u8,
        // FetchDirection: [buf_len]u8,
        // FileUsage: [buf_len]u8,
        // ForwardOnlyCursorAttributes1: [buf_len]u8,
        // ForwardOnlyCursorAttributes2: [buf_len]u8,
        // GetdataExtensions: [buf_len]u8,
        // GroupBy: [buf_len]u8,
        // IdentifierCase: [buf_len]u8,
        // IdentifierQuoteChar: [buf_len]u8,
        // InfoSchemaViews: [buf_len]u8,
        // InsertStatement: [buf_len]u8,
        // Integrity: [buf_len]u8,
        // KeysetCursorAttributes1: [buf_len]u8,
        // KeysetCursorAttributes2: [buf_len]u8,
        // Keywords: [buf_len]u8,
        // LikeEscapeClause: [buf_len]u8,
        // LockTypes: [buf_len]u8,
        // MaxAsyncConcurrentStatements: [buf_len]u8,
        // MaxBinaryLiteralLen: [buf_len]u8,
        // MaxCatalogNameLen: [buf_len]u8,
        // MaxCharLiteralLen: [buf_len]u8,
        // MaxColumnNameLen: [buf_len]u8,
        // MaxColumnsInGroupBy: [buf_len]u8,
        // MaxColumnsInIndex: [buf_len]u8,
        // MaxColumnsInOrderBy: [buf_len]u8,
        // MaxColumnsInSelect: [buf_len]u8,
        // MaxColumnsInTable: [buf_len]u8,
        // MaxConcurrentActivities: [buf_len]u8,
        // MaxCursorNameLen: [buf_len]u8,
        // MaxDriverConnections: [buf_len]u8,
        // MaxIdentifierLen: [buf_len]u8,
        // MaxIndexSize: [buf_len]u8,
        // MaxProcedureNameLen: [buf_len]u8,
        // MaxRowSize: [buf_len]u8,
        // MaxRowSizeIncludesLong: [buf_len]u8,
        // MaxSchemaNameLen: [buf_len]u8,
        // MaxStatementLen: [buf_len]u8,
        // MaxTableNameLen: [buf_len]u8,
        // MaxTablesInSelect: [buf_len]u8,
        // MaxUserNameLen: [buf_len]u8,
        // MultResultSets: [buf_len]u8,
        // MultipleActiveTxn: [buf_len]u8,
        // NeedLongDataLen: [buf_len]u8,
        // NonNullableColumns: [buf_len]u8,
        // NullCollation: [buf_len]u8,
        // NumericFunctions: [buf_len]u8,
        // OdbcApiConformance: [buf_len]u8,
        // OdbcSagCliConformance: [buf_len]u8,
        // OdbcSqlConformance: [buf_len]u8,
        // OdbcVer: [buf_len]u8,
        // OjCapabilities: [buf_len]u8,
        // OrderByColumnsInSelect: [buf_len]u8,
        // OuterJoins: [buf_len]u8,
        // OwnerTerm: [buf_len]u8,
        // ParamArrayRowCounts: [buf_len]u8,
        // ParamArraySelects: [buf_len]u8,
        // PosOperations: [buf_len]u8,
        // PositionedStatements: [buf_len]u8,
        // ProcedureTerm: [buf_len]u8,
        // Procedures: [buf_len]u8,
        // QuotedIdentifierCase: [buf_len]u8,
        // RowUpdates: [buf_len]u8,
        // SchemaUsage: [buf_len]u8,
        // ScrollConcurrency: [buf_len]u8,
        // ScrollOptions: [buf_len]u8,
        // SearchPatternEscape: [buf_len]u8,
        // ServerName: [buf_len]u8,
        // SpecialCharacters: [buf_len]u8,
        // Sql92Predicates: [buf_len]u8,
        // Sql92ValueExpressions: [buf_len]u8,
        // StaticCursorAttributes1: [buf_len]u8,
        // StaticCursorAttributes2: [buf_len]u8,
        // StaticSensitivity: [buf_len]u8,
        // StringFunctions: [buf_len]u8,
        // Subqueries: [buf_len]u8,
        // SystemFunctions: [buf_len]u8,
        // TableTerm: [buf_len]u8,
        // TimedateAddIntervals: [buf_len]u8,
        // TimedateDiffIntervals: [buf_len]u8,
        // TimedateFunctions: [buf_len]u8,
        // TxnCapable: [buf_len]u8,
        // TxnIsolationOption: [buf_len]u8,
        // Union: [buf_len]u8,
        // UserName: [buf_len]u8,
        // XopenCliYear: [buf_len]u8,
        // // IBM Db2 specific info types
        // // AsciiGccsid: [buf_len]u8,
        // // AsciiMccsid: [buf_len]u8,
        // // AsciiSccsid: [buf_len]u8,
        // // ConvertRowid: [buf_len]u8,
        // // CloseBehavior: [buf_len]u8,
        // // EbcdicGccsid: [buf_len]u8,
        // // EbcdicMccsid: [buf_len]u8,
        // // EbcdicSccsid: [buf_len]u8,
        // // UnicodeGccsid: [buf_len]u8,
        // // UnicodeMccsid: [buf_len]u8,
        // // UnicodeSccsid: [buf_len]u8,

        pub fn activeTag(self: InfoTypeValue) InfoType {
            return std.meta.activeTag(self);
        }

        pub const AggregateFunctionsMask = struct {
            data: u32 = undefined,
        };

        pub const AlterDomainMask = struct {
            data: u32 = undefined,
        };

        pub const AlterTableMask = struct {
            data: u32 = undefined,
        };

        pub const BatchRowCountMask = struct {
            data: u32 = undefined,
        };

        pub const BatchSupportMask = struct {
            data: u32 = undefined,
        };

        pub const BookmarkPersistenceMask = struct {
            data: u32 = undefined,
        };

        pub const CatalogUsageMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertBigintMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertBinaryMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertBitMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertCharMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertDateMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertDecimalMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertDoubleMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertFloatMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertIntegerMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertIntervalDayTimeMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertIntervalYearMonthMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertLongvarbinaryMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertLongvarcharMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertNumericMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertRealMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertSmallintMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertTimeMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertTimestampMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertTinyintMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertVarbinaryMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertVarcharMask = struct {
            data: u32 = undefined,
        };

        pub const ConvertFunctionsMask = struct {
            data: u32 = undefined,
        };
    };
};

fn strToBool(buf: [buf_len]u8, len: i16, expected: []const u8) bool {
    return std.mem.eql(u8, buf[0..@intCast(len)], expected);
}

fn readInt(T: type, buf: [buf_len]u8, len: i16) T {
    const slice: []const u8 = buf[0..@intCast(len)];
    return std.mem.readInt(T, @ptrCast(slice), .little);
}
